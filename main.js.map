{"version":3,"sources":["./src/app/transactions.service.ts","./src/environments/environment.ts","./src/app/transactions.reducer.ts","./src/app/transfer-form/iban.validator.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/transactions-list/transactions-list.component.ts","./src/app/transactions-list/transactions-list.component.html","./src/app/app.module.ts","./src/app/transfer-form/transfer-form.component.ts","./src/app/transfer-form/transfer-form.component.html","./src/app/transfer-form/amount.validator.ts","./src/app/transfer.actions.ts","./src/app/transactions.effects.ts","./src/app/transactions.actions.ts","./src/app/transfer.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport transactionsMock from '../mocks/transactions.json';\n\nexport interface ITransaction {\n  categoryCode: string;\n  dates: {\n    valueDate: string | number;\n  };\n  transaction: {\n    amountCurrency: {\n      amount: string | number;\n      currencyCode: string;\n    };\n    type: string;\n    creditDebitIndicator: 'CRDT' | 'DBIT';\n  };\n  merchant: {\n    name: string;\n    accountNumber: string;\n  };\n}\n\nconst DELAY_MS = 500;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionsService {\n  list: Array<ITransaction> = transactionsMock.data as any;\n\n  constructor(\n    private store: Store<{ transactions: any }>\n  ) {}\n\n  getList(): Observable<Array<ITransaction>> {\n    return of(this.list).pipe(delay(DELAY_MS));\n  }\n\n  addTransaction(newTransaction: ITransaction): void {\n    this.list = [newTransaction, ...this.list];\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { createReducer, on } from '@ngrx/store';\nimport { errorAction, loadAction, successAction } from './transactions.actions';\nimport { ITransaction } from './transactions.service';\n\nexport interface ITransactionsState {\n  isLoading: boolean;\n  isError: boolean;\n  list: ITransaction[];\n}\n\nconst initialState: ITransactionsState = {\n  isLoading: false,\n  isError: false,\n  list: []\n};\n\nconst reducer = createReducer(initialState,\n  on(loadAction, (state) => ({\n    ...state,\n    isLoading: true,\n    isError: false\n  })),\n  on(successAction, (state, { transactionsList }) => ({\n    ...state,\n    isLoading: false,\n    list: transactionsList\n  })),\n  on(errorAction, (state) => ({\n    ...state,\n    isLoading: false,\n    isError: true\n  })),\n);\n\nexport function transactionsReducer(state, action): ITransactionsState {\n  return reducer(state, action);\n}\n","import * as iban from 'iban';\nimport { AbstractControl } from '@angular/forms';\n\nexport function ibanValidator(control: AbstractControl): {[key: string]: boolean} | null {\n  if (!iban.isValid(control.value)){\n    return { iban: true };\n  }\n  return null;\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'bb';\n}\n","<div class=\"bb-navbar\">\n  <div class=\"container\">\n    <img class=\"bb-navbar__logo\" src=\"assets/logo.jpg\">\n  </div>\n</div>\n<div class=\"container mb-3\">\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <!-- FORM -->\n      <div class=\"bb-panel\">\n        <div class=\"bb-panel__header\">\n          <img class=\"bb-panel__header__icon\" src=\"assets/icons/arrows.png\">\n          Make a transfer\n        </div>\n        <div class=\"bb-panel__body\">\n          <app-transfer-form></app-transfer-form>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-8\">\n      <!-- TRANSACTIONS -->\n      <div class=\"bb-panel bb-panel--large\">\n        <div class=\"bb-panel__header\">\n          <img class=\"bb-panel__header__icon\" src=\"assets/icons/briefcase.png\">\n          Recent transactions\n        </div>\n        <div class=\"bb-panel__body\">\n          <app-transactions-list></app-transactions-list>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { Store, select } from '@ngrx/store';\nimport { ITransaction } from '../transactions.service';\nimport { loadAction } from '../transactions.actions';\n\ntype SortByOption = 'amount' | 'beneficiary' | 'date';\n\ninterface ITransactionRow {\n  date: number;\n  merchantIconSrc: string;\n  merchantName: string;\n  transactionType: string;\n  amount: number;\n  currency: string;\n  categoryCode: string;\n}\n\nfunction normalizeTransaction(transaction: ITransaction): ITransactionRow {\n  let date: string | number = transaction.dates.valueDate;\n  if (typeof date === 'string') {\n    date = new Date(date).getTime();\n  }\n  let amount: string | number = transaction.transaction.amountCurrency.amount;\n  if (typeof amount === 'string') {\n    amount = parseFloat(amount);\n  }\n  if (transaction.transaction.creditDebitIndicator === 'DBIT') {\n    amount = -amount;\n  }\n  const merchantIconSrc = transaction.merchant.name\n    ? 'assets/merchant-logos/' + transaction.merchant.name.toLowerCase().split(' ').join('-') + '.png'\n    : null;\n  return {\n    date,\n    merchantIconSrc,\n    merchantName: transaction.merchant.name,\n    transactionType: transaction.transaction.type,\n    amount,\n    currency: transaction.transaction.amountCurrency.currencyCode,\n    categoryCode: transaction.categoryCode,\n  };\n}\n\n@Component({\n  selector: 'app-transactions-list',\n  templateUrl: './transactions-list.component.html'\n})\nexport class TransactionsListComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  isLoading = false;\n  transactions: Array<ITransactionRow> = [];\n\n  fcSearchPhrase = new FormControl('');\n\n  sort$ = new BehaviorSubject<{\n    sortBy: SortByOption,\n    isAscending: boolean\n  }>({\n    sortBy: 'date',\n    isAscending: false\n  });\n  // properties for easier handling in the template:\n  sortBy: SortByOption;\n  isAscending: boolean;\n\n  constructor(\n    private store: Store<{ transactions: any }>\n  ) {}\n\n  ngOnInit(): void {\n    const normalizedTransactionsState$ = this.store.pipe(\n      select('transactions'),\n      map(transactionsState => ({\n        isLoading: transactionsState.isLoading,\n        list: transactionsState.list.map(normalizeTransaction)\n      }))\n    );\n    const searchPhrase$ = this.fcSearchPhrase.valueChanges.pipe(startWith(''));\n    this.subscription = combineLatest([\n      normalizedTransactionsState$,\n      searchPhrase$,\n      this.sort$\n    ])\n      .subscribe(([transactionsState, searchPhrase, sort]) => {\n        this.isLoading = transactionsState.isLoading;\n        // Search\n        const lowerCaseSearchPhrase = searchPhrase.toLowerCase();\n        this.transactions = transactionsState.list.filter(\n          transaction => {\n            const phrases = [\n              transaction.transactionType,\n              transaction.merchantName,\n              transaction.currency\n            ];\n            for (const phrase of phrases) {\n              if (phrase.toLowerCase().indexOf(lowerCaseSearchPhrase) >= 0) {\n                return true;\n              }\n            }\n            return false;\n          }\n        );\n        // Sort\n        this.sortBy = sort.sortBy;\n        this.isAscending = sort.isAscending;\n        const sortOrderMultiplier = sort.isAscending ? 1 : -1;\n        const sortFnDict = {\n          amount: (a: ITransactionRow, b: ITransactionRow) => (a.amount - b.amount) * sortOrderMultiplier,\n          beneficiary: (a: ITransactionRow, b: ITransactionRow) => (a.merchantName > b.merchantName ? 1 : -1) * sortOrderMultiplier,\n          date: (a: ITransactionRow, b: ITransactionRow) => (a.date - b.date) * sortOrderMultiplier\n        };\n        const sortFn = sortFnDict[sort.sortBy];\n        if (sortFn) {\n          this.transactions.sort(sortFn);\n        }\n      });\n\n    this.store.dispatch(loadAction());\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  setSortBy(sortBy: SortByOption): void {\n    const currentSort = this.sort$.getValue();\n    this.sort$.next({\n      sortBy,\n      isAscending: sortBy === currentSort.sortBy ? !currentSort.isAscending : currentSort.isAscending\n    });\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-6\">\n    <input type=\"text\"\n      class=\"form-control\"\n      id=\"transactions_searchPhrase\"\n      [formControl]=\"fcSearchPhrase\"\n      placeholder=\"Search by typing...\">\n  </div>\n  <div class=\"col-md-6 text-right\">\n    Sort by:\n    <div class=\"btn-group\" role=\"group\">\n      <button (click)=\"setSortBy('date')\"\n        type=\"button\"\n        class=\"btn btn-outline-dark\">\n        <span *ngIf=\"sortBy === 'date'\"\n          [ngClass]=\"{ 'bb-sort-icon--descending': !isAscending }\"\n          class=\"bb-sort-icon\"></span>\n        Date\n      </button>\n      <button (click)=\"setSortBy('beneficiary')\"\n        type=\"button\"\n        class=\"btn btn-outline-dark\">\n        <span *ngIf=\"sortBy === 'beneficiary'\"\n          [ngClass]=\"{ 'bb-sort-icon--descending': !isAscending }\"\n          class=\"bb-sort-icon\"></span>\n        Beneficiary\n      </button>\n      <button (click)=\"setSortBy('amount')\"\n        type=\"button\"\n        class=\"btn btn-outline-dark\">\n        <span *ngIf=\"sortBy === 'amount'\"\n          [ngClass]=\"{ 'bb-sort-icon--descending': !isAscending }\"\n          class=\"bb-sort-icon\"></span>\n        Amount\n      </button>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-table-spinner\">\n  <div class=\"spinner-border\" role=\"status\" *ngIf=\"isLoading\"></div>\n</div>\n<table class=\"bb-table\">\n  <tr *ngFor=\"let transaction of transactions\">\n    <td>\n      <div class=\"bb-table__color-strip\" [ngStyle]=\"{ background: transaction.categoryCode }\"></div>\n      {{ transaction.date | date:'LLL. d' }}\n    </td>\n    <td>\n      <img *ngIf=\"transaction.merchantIconSrc\" [src]=\"transaction.merchantIconSrc\" class=\"bb-table__icon\">\n      <div *ngIf=\"!transaction.merchantIconSrc\" class=\"bb-table__icon\"></div>\n    </td>\n    <td>\n      <div>{{ transaction.merchantName }}</div>\n      {{ transaction.transactionType }}\n    </td>\n    <td class=\"text-right\">{{ transaction.amount.toFixed(2) }} {{ transaction.currency }}</td>\n  </tr>\n</table>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\n\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\n// In a larger applications translations would be loaded dynamically.\n// This app doesn't use http.\nimport translationEnUS from '../i18n/en-US.json';\nimport translationPlPL from '../i18n/pl-PL.json';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { transactionsReducer } from './transactions.reducer';\nimport { TransactionsEffects } from './transactions.effects';\n\nimport { TransactionsListComponent } from './transactions-list/transactions-list.component';\nimport { TransferFormComponent } from './transfer-form/transfer-form.component';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    TransactionsListComponent,\n    TransferFormComponent,\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    TranslateModule.forRoot({\n      defaultLanguage: 'en-US',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: () => ({\n          getTranslation: (lang: string): Observable<any> => {\n            return of({\n              'en-US': translationEnUS,\n              'pl-PL': translationPlPL\n            }[lang]);\n          }\n        })\n      }\n  }),\n    StoreModule.forRoot({\n      transactions: transactionsReducer\n    }),\n    EffectsModule.forRoot([\n      TransactionsEffects\n    ])\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { TransferService, IAccount } from '../transfer.service';\nimport { createAmountValidator } from './amount.validator';\nimport { ibanValidator } from './iban.validator';\n\n// Separate configurations for fields are not needed here.\nconst transferFormErrorsOrder = ['required', 'iban', 'invalid', 'amountTooLow'];\n\nconst transferFormInitialValues = {\n  fromAccount: '',\n  toAccount: '',\n  amount: '',\n};\n\n@Component({\n  selector: 'app-transfer-form',\n  templateUrl: './transfer-form.component.html'\n})\nexport class TransferFormComponent implements OnInit {\n  currentState: 'FORM' | 'CONFIRMATION' = 'FORM';\n\n  fromAccount?: IAccount = null;\n\n  // show loading indicator for account field\n  isLoadingAccounts = false;\n\n  // show loading indicator after form is submitted\n  isLoading = false;\n\n  // show form submitting error\n  isError = false;\n\n  fcFromAccount = new FormControl({ value: '', disabled: true });\n  fcToAccount = new FormControl('', [\n    Validators.required,\n    ibanValidator\n  ]);\n  fcAmount = new FormControl('', [\n    Validators.required,\n    createAmountValidator(() => {\n      if (!this.fromAccount) {\n        return 0;\n      }\n      return this.fromAccount.balance + this.fromAccount.maxOverdraft;\n    })\n  ]);\n  transferForm = new FormGroup({\n    fromAccount: this.fcFromAccount,\n    toAccount: this.fcToAccount,\n    amount: this.fcAmount,\n  });\n\n  confirmationSummary = {\n    fromAccount: '',\n    toAccount: '',\n    amount: '', // 6301\n    currency: ''\n  };\n\n  constructor(\n    private transferService: TransferService\n  ) {}\n\n  ngOnInit(): void {\n    this.showForm();\n  }\n\n  showForm(): void {\n    this.currentState = 'FORM';\n    this.transferForm.reset();\n    this.transferForm.setValue(transferFormInitialValues);\n\n    this.isLoadingAccounts = true;\n    this.transferService.getFromAccounts().subscribe(fromAccounts => {\n      this.fromAccount = fromAccounts[0];\n      this.isLoadingAccounts = false;\n      if (this.fromAccount) {\n        const displayValue = this.fromAccount.name + ' - ' + this.fromAccount.balance + ' ' + this.fromAccount.currency;\n        this.fcFromAccount.setValue(displayValue);\n      } else {\n        this.fcFromAccount.setValue('');\n      }\n    });\n  }\n\n  showConfirmation(): void {\n    this.confirmationSummary = {\n      fromAccount: this.fcFromAccount.value,\n      toAccount: this.fcToAccount.value,\n      amount: parseFloat(this.fcAmount.value).toFixed(2),\n      currency: this.fromAccount.currency\n    };\n    this.currentState = 'CONFIRMATION';\n  }\n\n  onSubmit(): void {\n    // Prevent multiple clicks\n    if (this.isLoading) {\n      return;\n    }\n    // Check if all data is loaded\n    if (this.isLoadingAccounts) {\n      return;\n    }\n    // Show all errors\n    Object.keys(this.transferForm.controls).forEach(key => {\n      this.transferForm.controls[key].markAsDirty();\n    });\n    // Prevent sending invalid form\n    if (this.transferForm.invalid) {\n      return;\n    }\n    this.showConfirmation();\n  }\n\n  onBack(): void {\n    // Prevent going back when request is in progress\n    if (this.isLoading) {\n      return;\n    }\n    this.currentState = 'FORM';\n  }\n\n  onConfirm(): void {\n    // Prevent multiple clicks\n    if (this.isLoading) {\n      return;\n    }\n    // Map form to transfer DTO\n    const transfer = {\n      amount: parseFloat(this.transferForm.value.amount),\n      fromAccount: this.fromAccount\n    };\n    // Submit\n    this.isError = false;\n    this.isLoading = true;\n    this.transferService\n      .makeTransfer(transfer)\n      .subscribe(\n        () => {\n          this.isLoading = false;\n          this.showForm();\n        },\n        () => {\n          // Show generic error\n          this.isError = true;\n          this.isLoading = false;\n        }\n      );\n  }\n\n  getFirstError(formControl: FormControl): string | undefined {\n    const errorKey = transferFormErrorsOrder.find(key => formControl.errors[key]);\n    return errorKey || Object.keys(formControl.errors)[0];\n  }\n}\n","<div *ngIf=\"currentState === 'FORM'\">\n  <form [formGroup]=\"transferForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"transferForm_fromAccount\">{{ 'transferForm.fromAccount' | translate }}</label>\n      <input *ngIf=\"isLoadingAccounts\"\n        type=\"text\"\n        class=\"form-control\"\n        value=\"Loading accounts...\"\n        disabled>\n      <input *ngIf=\"!isLoadingAccounts\"\n        type=\"text\"\n        class=\"form-control\"\n        id=\"transferForm_fromAccount\"\n        formControlName=\"fromAccount\"\n        [ngClass]=\"{\n          'is-invalid': fcFromAccount.invalid && (fcFromAccount.dirty || fcFromAccount.touched)\n        }\">\n      <div class=\"invalid-feedback\" *ngIf=\"fcFromAccount.errors && (fcFromAccount.dirty || fcFromAccount.touched)\">\n        {{ 'validation.error.' + getFirstError(fcFromAccount) | translate }}\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"transferForm_toAccount\">{{ 'transferForm.toAccount' | translate }}</label>\n      <input type=\"text\"\n        class=\"form-control\"\n        id=\"transferForm_toAccount\"\n        formControlName=\"toAccount\"\n        [ngClass]=\"{\n          'is-invalid': fcToAccount.invalid && (fcToAccount.dirty || fcToAccount.touched)\n        }\">\n      <div class=\"invalid-feedback\" *ngIf=\"fcToAccount.errors && (fcToAccount.dirty || fcToAccount.touched)\">\n        {{ 'validation.error.' + getFirstError(fcToAccount) | translate }}\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"transferForm_amount\">{{ 'transferForm.amount' | translate }}</label>\n      <input type=\"text\"\n        class=\"form-control\"\n        id=\"transferForm_amount\"\n        formControlName=\"amount\"\n        [ngClass]=\"{\n          'is-invalid': fcAmount.invalid && (fcAmount.dirty || fcAmount.touched)\n        }\">\n      <div class=\"invalid-feedback\" *ngIf=\"fcAmount.errors && (fcAmount.dirty || fcAmount.touched)\">\n        {{ 'validation.error.' + getFirstError(fcAmount) | translate }}\n      </div>\n    </div>\n    <div *ngIf=\"isError\">{{ 'transferForm.genericError' | translate }}</div>\n    <div class=\"bb-form-buttons\">\n      <button type=\"submit\" class=\"btn btn-primary\">\n        <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm\" role=\"status\"></span>\n        {{ 'transferForm.submit' | translate }}\n      </button>\n    </div>\n  </form>  \n</div>\n<div *ngIf=\"currentState === 'CONFIRMATION'\">\n  <div>\n    <div>{{ 'transferForm.fromAccount' | translate }}:</div>\n    <strong>{{ confirmationSummary.fromAccount }}</strong>\n  </div>\n  <div>\n    <div>{{ 'transferForm.toAccount' | translate }}:</div>\n    <strong>{{ confirmationSummary.toAccount }}</strong>\n  </div>\n  <div>\n    <div>{{ 'transferForm.amount' | translate }}:</div>\n    <strong>{{ confirmationSummary.amount }} {{ confirmationSummary.currency }}</strong>\n  </div>\n  <div *ngIf=\"isError\">{{ 'transferForm.genericError' | translate }}</div>\n  <div class=\"bb-form-buttons\">\n    <button (click)=\"onConfirm()\" type=\"button\" class=\"btn btn-primary\">\n      <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm\" role=\"status\"></span>\n      {{ 'transferForm.confirm' | translate }}\n    </button>\n    <button (click)=\"onBack()\" type=\"button\" class=\"btn btn-secondary\">\n      {{ 'transferForm.back' | translate }}\n    </button>\n  </div>\n</div>\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport function createAmountValidator(maxAmountGetterFn: () => number): ValidatorFn {\n  return function amountValidator(control: AbstractControl): {[key: string]: boolean} | null {\n    const amountString = control.value;\n    const amount = parseFloat(amountString);\n    if (isNaN(amount)) {\n      return { invalid: true };\n    }\n    if (amount <= 0) {\n      return { amountTooLow: true };\n    }\n    if (amount > maxAmountGetterFn()) {\n      return { amountTooHigh: true };\n    }\n    return null;\n  };\n}\n","import { createAction } from '@ngrx/store';\n\nexport const successAction = createAction('[Transfer] Success');\n","import { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { successAction as transferSuccessAction } from './transfer.actions';\nimport { loadAction, successAction, errorAction } from './transactions.actions';\nimport { TransactionsService } from './transactions.service';\n\n@Injectable()\nexport class TransactionsEffects {\n  constructor(\n    private actions$: Actions,\n    private transactionsService: TransactionsService\n  ) {}\n\n  loadTransactions$ = createEffect(() => this.actions$.pipe(\n    ofType(loadAction.type),\n    // ignore previous pending requests to prevent wrong order\n    switchMap(() => this.transactionsService.getList()\n      .pipe(\n        map(transactionsList => successAction({ transactionsList })),\n        catchError(() => of(errorAction()))\n      )\n    )\n  ));\n\n  /* Reload transactions list after a transfer is made */\n  transferSuccess$ = createEffect(() => this.actions$.pipe(\n    ofType(transferSuccessAction.type),\n    map(() => loadAction())\n  ));\n}\n","import { createAction, props } from '@ngrx/store';\nimport { ITransaction } from './transactions.service';\n\nexport const loadAction = createAction('[Transactions] Load');\nexport const successAction = createAction(\n  '[Transactions] Load success',\n  props<{ transactionsList: Array<ITransaction> }>()\n);\nexport const errorAction = createAction('[Transactions] Load error');\n","import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { TransactionsService } from './transactions.service';\nimport { successAction } from './transfer.actions';\n\nexport interface IAccount {\n  id: string;\n  name: string;\n  balance: number;\n  currency: string;\n  maxOverdraft: number;\n}\n\ninterface ITransfer {\n  amount: number;\n  fromAccount: IAccount;\n}\n\nconst DELAY_MS = 200;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransferService {\n  accounts = [{\n    id: '1',\n    name: 'Free Checking (4692)',\n    balance: 5824.76,\n    currency: 'USD',\n    maxOverdraft: 500\n  }];\n\n  constructor(\n    private transactionsService: TransactionsService,\n    private store: Store<{ transactions: any }>\n  ) {}\n\n  getFromAccounts(): Observable<Array<IAccount>> {\n    return of(this.accounts).pipe(delay(DELAY_MS));\n  }\n\n  makeTransfer(newTransfer: ITransfer): Observable<null> {\n    return of(null)\n      .pipe(\n        delay(DELAY_MS),\n        tap(() => {\n          const account = this.accounts.find(acc => acc.id === newTransfer.fromAccount.id);\n          if (!account) {\n            throw Error('account not found');\n          }\n          account.balance -= newTransfer.amount;\n          account.balance = Math.round(account.balance * 100) / 100;\n\n          this.transactionsService.addTransaction({\n            categoryCode: '#1180aa',\n            dates: {\n              valueDate: Date.now()\n            },\n            transaction: {\n              amountCurrency: {\n                amount: newTransfer.amount,\n                currencyCode: newTransfer.fromAccount.currency,\n              },\n              type: 'Transaction',\n              creditDebitIndicator: 'DBIT'\n            },\n            merchant: {\n              name: '',\n              accountNumber: ''\n            }\n          });\n\n          this.store.dispatch(successAction());\n        })\n      );\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}